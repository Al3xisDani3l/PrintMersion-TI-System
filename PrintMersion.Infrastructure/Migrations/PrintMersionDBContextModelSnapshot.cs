// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrintMersion.Infrastructure.Data;

namespace PrintMersion.Infrastructure.Migrations
{
    [DbContext(typeof(PrintMersionDBContext))]
    partial class PrintMersionDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PrintMersion.Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ExteriorNumber")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("InteriorNumber")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("Latitude")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<string>("Logitude")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("ZipCode")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UQ__Address__3214EC0650DF4974");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.BotCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<int?>("IdAddress")
                        .HasColumnType("int");

                    b.Property<string>("LastClickedButtonName")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("LastSeen")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<string>("LastVisitedBlockId")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<string>("LastVisitedBlockName")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<string>("Locale")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<string>("MessengerUserId")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ProfilePicUrl")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(true);

                    b.Property<string>("Sessions")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<string>("SignedUp")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<string>("Source")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.Property<string>("TimeZone")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IdAddress");

                    b.ToTable("BotCustomers");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UQ__Catalogs__3214EC069D79A489");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.CatalogsPictures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdCatalog")
                        .HasColumnType("int");

                    b.Property<int>("IdPicture")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCatalog");

                    b.HasIndex("IdPicture");

                    b.ToTable("Catalogs_Pictures");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.CatalogsProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdCatalog")
                        .HasColumnType("int");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCatalog");

                    b.HasIndex("IdProduct");

                    b.ToTable("Catalogs_Products");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("IdAddress")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UQ__Customer__3214EC06F6258619");

                    b.HasIndex("IdAddress");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.CustomersPictures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<int>("IdPicture")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdPicture");

                    b.ToTable("Customers_Pictures");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.LogsTools", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EndUse")
                        .HasColumnType("datetime");

                    b.Property<int>("IdAdminister")
                        .HasColumnType("int");

                    b.Property<int>("IdTool")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartUse")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UQ__LogsTool__3214EC06BB600FAA");

                    b.HasIndex("IdAdminister");

                    b.HasIndex("IdTool");

                    b.ToTable("LogsTools");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Address")
                        .HasColumnType("int");

                    b.Property<int?>("BotCustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("DetailedInformation")
                        .HasColumnType("text")
                        .IsUnicode(false);

                    b.Property<int?>("IdAdminister")
                        .HasColumnType("int");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<double>("Subtotal")
                        .HasColumnType("double");

                    b.Property<double>("Total")
                        .HasColumnType("double");

                    b.Property<string>("Tracking")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("BotCustomerId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UQ__Orders__3214EC068F9DCEBA");

                    b.HasIndex("IdAdminister");

                    b.HasIndex("IdCustomer");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("DataRaw")
                        .HasColumnType("LONGBLOB")
                        .IsUnicode(false);

                    b.Property<string>("Metadata")
                        .HasColumnType("text")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UQ__Pictures__3214EC069D4153E6");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UQ__Products__3214EC0658BFAAF7");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.ProductsPictures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdPicture")
                        .HasColumnType("int");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPicture");

                    b.HasIndex("IdProduct");

                    b.ToTable("Products_Pictures");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .IsUnicode(false);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UQ__Tools__3214EC06EEF22EC7");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.ToolsPictures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdPicture")
                        .HasColumnType("int");

                    b.Property<int>("IdTools")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPicture");

                    b.HasIndex("IdTools");

                    b.ToTable("Tools_Pictures");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("IdPicture")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnName("Role")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UQ__Administ__3214EC06F23652DC");

                    b.HasIndex("IdPicture");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.UsersPictures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdPicture")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnName("IdUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPicture");

                    b.HasIndex("IdUser");

                    b.ToTable("UsersPictures");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.BotCustomer", b =>
                {
                    b.HasOne("PrintMersion.Core.Entities.Address", "IdAddressNavigation")
                        .WithMany("BotCustomers")
                        .HasForeignKey("IdAddress")
                        .HasConstraintName("fk_BotCustomers_Address");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.CatalogsPictures", b =>
                {
                    b.HasOne("PrintMersion.Core.Entities.Catalog", "IdCatalogNavigation")
                        .WithMany()
                        .HasForeignKey("IdCatalog")
                        .HasConstraintName("fk_Catalogs_Pictures_Catalogs")
                        .IsRequired();

                    b.HasOne("PrintMersion.Core.Entities.Picture", "IdPictureNavigation")
                        .WithMany()
                        .HasForeignKey("IdPicture")
                        .HasConstraintName("fk_Catalogs_Pictures_Pictures")
                        .IsRequired();
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.CatalogsProducts", b =>
                {
                    b.HasOne("PrintMersion.Core.Entities.Catalog", "IdCatalogNavigation")
                        .WithMany()
                        .HasForeignKey("IdCatalog")
                        .HasConstraintName("fk_Catalogs_Products_Catalogs")
                        .IsRequired();

                    b.HasOne("PrintMersion.Core.Entities.Product", "IdProductNavigation")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("fk_Catalogs_Products_Products")
                        .IsRequired();
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.Customer", b =>
                {
                    b.HasOne("PrintMersion.Core.Entities.Address", "IdAddressNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("IdAddress")
                        .HasConstraintName("fk_Customers_Address");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.CustomersPictures", b =>
                {
                    b.HasOne("PrintMersion.Core.Entities.Customer", "IdCustomerNavigation")
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .HasConstraintName("fk_Customers_Pictures_Customers")
                        .IsRequired();

                    b.HasOne("PrintMersion.Core.Entities.Picture", "IdPictureNavigation")
                        .WithMany()
                        .HasForeignKey("IdPicture")
                        .HasConstraintName("fk_Customers_Pictures_Pictures")
                        .IsRequired();
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.LogsTools", b =>
                {
                    b.HasOne("PrintMersion.Core.Entities.User", "IdAdministerNavigation")
                        .WithMany("LogsTools")
                        .HasForeignKey("IdAdminister")
                        .HasConstraintName("fk_LogsTools_Administers")
                        .IsRequired();

                    b.HasOne("PrintMersion.Core.Entities.Tool", "IdToolNavigation")
                        .WithMany("LogsTools")
                        .HasForeignKey("IdTool")
                        .HasConstraintName("fk_LogsTools_Tool")
                        .IsRequired();
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.Order", b =>
                {
                    b.HasOne("PrintMersion.Core.Entities.BotCustomer", null)
                        .WithMany("Orders")
                        .HasForeignKey("BotCustomerId");

                    b.HasOne("PrintMersion.Core.Entities.User", "IdAdministerNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdAdminister")
                        .HasConstraintName("fk_Orders_Users");

                    b.HasOne("PrintMersion.Core.Entities.Customer", "IdCustomerNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdCustomer")
                        .HasConstraintName("fk_Orders_Customers")
                        .IsRequired();
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.ProductsPictures", b =>
                {
                    b.HasOne("PrintMersion.Core.Entities.Picture", "IdPictureNavigation")
                        .WithMany()
                        .HasForeignKey("IdPicture")
                        .HasConstraintName("fk_Products_Pictures_Pictures")
                        .IsRequired();

                    b.HasOne("PrintMersion.Core.Entities.Product", "IdProductNavigation")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("fk_Products_Pictures_Products")
                        .IsRequired();
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.ToolsPictures", b =>
                {
                    b.HasOne("PrintMersion.Core.Entities.Picture", "IdPictureNavigation")
                        .WithMany()
                        .HasForeignKey("IdPicture")
                        .HasConstraintName("fk_Tools_Pictures_Pictures")
                        .IsRequired();

                    b.HasOne("PrintMersion.Core.Entities.Tool", "IdToolsNavigation")
                        .WithMany()
                        .HasForeignKey("IdTools")
                        .HasConstraintName("fk_Tools_Pictures_Tools")
                        .IsRequired();
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.User", b =>
                {
                    b.HasOne("PrintMersion.Core.Entities.Picture", "IdPictureNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdPicture")
                        .HasConstraintName("fk_User_Picture");
                });

            modelBuilder.Entity("PrintMersion.Core.Entities.UsersPictures", b =>
                {
                    b.HasOne("PrintMersion.Core.Entities.Picture", "IdPictureNavigation")
                        .WithMany()
                        .HasForeignKey("IdPicture")
                        .HasConstraintName("fk_Users_Pictures_Pictures")
                        .IsRequired();

                    b.HasOne("PrintMersion.Core.Entities.User", "IdUserNavigation")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .HasConstraintName("fk_Users_Pictures_Users")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
